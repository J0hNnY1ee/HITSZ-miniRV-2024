// Generated by CIRCT firtool-1.62.0
module PCReg(
  input         clock,
                reset,
  output [31:0] io_pc,
  input         io_isJump,
                io_isBranch,
                io_resultBr,
  input  [31:0] io_addrTarget
);

  reg [31:0] regPC;
  always @(posedge clock) begin
    if (reset)
      regPC <= 32'h0;
    else if (io_isJump | io_isBranch & io_resultBr)
      regPC <= io_addrTarget;
    else
      regPC <= regPC + 32'h4;
  end // always @(posedge)
  assign io_pc = regPC;
endmodule

// external module IROM

module InstMem(
  input  [31:0] io_addr,
  output [31:0] io_inst
);

  IROM irom (
    .a   ({2'h0, io_addr[31:2]}),
    .spo (io_inst)
  );
endmodule

module Decoder(
  input  [31:0] io_inst,
  output        io_ctl_isLui,
                io_ctl_isJump,
                io_ctl_isBranch,
                io_ctl_isRegWrite,
                io_ctl_isLoad,
                io_ctl_isStore,
                io_ctl_isSext,
                io_ctl_isJAL,
  output [3:0]  io_ctl_op,
  output        io_ctl_isSigned,
  output [1:0]  io_ctl_ctrlLSType,
  output [31:0] io_imm,
  output [4:0]  io_regNum_rs1,
                io_regNum_rs2,
                io_regNum_rd
);

  wire            _GEN = io_inst[6:2] == 5'h5;
  wire            _GEN_0 = io_inst[6:2] == 5'hD;
  wire            _GEN_1 = io_inst[6:2] == 5'h1B;
  wire            _GEN_2 = io_inst[6:2] == 5'h19;
  wire            _GEN_3 = io_inst[6:2] == 5'h0;
  wire            _GEN_4 = io_inst[6:2] == 5'h4;
  wire            _GEN_5 = _GEN_2 | _GEN_3;
  wire            _GEN_6 = _GEN_5 | _GEN_4;
  wire            _GEN_7 = _GEN | _GEN_0;
  wire            _GEN_8 = _GEN | _GEN_0 | _GEN_1;
  wire            _GEN_9 = io_inst[14:12] == 3'h4;
  wire            _GEN_10 = io_inst[14:12] == 3'h5;
  wire            _GEN_11 = _GEN_9 | _GEN_10;
  wire            _GEN_12 = io_inst[14:12] == 3'h0;
  wire            _GEN_13 = io_inst[14:12] == 3'h1;
  wire            _GEN_14 = _GEN_13 | _GEN_10;
  wire            _GEN_15 = _GEN_4 & _GEN_14;
  wire [3:0]      _GEN_16 = {io_inst[30], io_inst[14:12]};
  wire            _GEN_17 = io_inst[14:12] == 3'h2;
  wire            _GEN_18 = io_inst[14:12] == 3'h3;
  wire            _GEN_19 = io_inst[14:12] == 3'h6;
  wire [3:0]      _GEN_20 = _GEN_19 ? 4'h5 : {1'h0, &(io_inst[14:12]), 2'h0};
  wire            _GEN_21 = io_inst[6:2] == 5'h18;
  wire            _GEN_22 = _GEN_1 | _GEN_6;
  wire            _GEN_23 = _GEN | _GEN_0 | _GEN_22;
  wire [3:0]      _GEN_24 = {4{&(io_inst[14:12])}};
  wire [7:0][3:0] _GEN_25 =
    {{_GEN_24}, {4'hE}, {4'hF}, {4'hE}, {_GEN_24}, {_GEN_24}, {4'hD}, {4'hC}};
  wire            _GEN_26 = io_inst[6:2] == 5'h8;
  wire            _GEN_27 = io_inst[6:2] == 5'hC;
  wire [7:0][3:0] _GEN_28 =
    {{_GEN_20},
     {_GEN_20},
     {{2'h2, io_inst[30], 1'h1}},
     {4'h7},
     {4'hE},
     {4'hE},
     {4'h8},
     {io_inst[30] ? 4'h2 : 4'h1}};
  assign io_ctl_isLui = ~_GEN & _GEN_0;
  assign io_ctl_isJump = ~_GEN_7 & (_GEN_1 | _GEN_6 & _GEN_2);
  assign io_ctl_isBranch = ~_GEN_23 & _GEN_21;
  assign io_ctl_isRegWrite = _GEN_23 | ~_GEN_21 & ~_GEN_26;
  assign io_ctl_isLoad = ~_GEN_8 & _GEN_6 & ~_GEN_2 & _GEN_3;
  assign io_ctl_isStore = ~(_GEN | _GEN_0 | _GEN_1 | _GEN_6 | _GEN_21) & _GEN_26;
  assign io_ctl_isSext = _GEN | ~_GEN_0 & (_GEN_22 | ~_GEN_21 & _GEN_26);
  assign io_ctl_isJAL = _GEN | ~_GEN_0 & _GEN_1;
  assign io_ctl_op =
    _GEN
      ? 4'h1
      : _GEN_0
          ? 4'h0
          : _GEN_1
              ? 4'h1
              : _GEN_6
                  ? (_GEN_5
                       ? 4'h1
                       : _GEN_15
                           ? (_GEN_16 == 4'h1
                                ? 4'h8
                                : _GEN_16 == 4'h5 ? 4'h9 : _GEN_16 == 4'hD ? 4'hB : 4'h0)
                           : _GEN_12
                               ? 4'h1
                               : _GEN_17 | _GEN_18 ? 4'hE : _GEN_9 ? 4'h7 : _GEN_20)
                  : _GEN_21
                      ? _GEN_25[io_inst[14:12]]
                      : _GEN_26 ? 4'h1 : _GEN_27 ? _GEN_28[io_inst[14:12]] : 4'h0;
  assign io_ctl_isSigned =
    _GEN_8
    | (_GEN_6
         ? _GEN_2 | (_GEN_3 ? ~_GEN_11 : _GEN_15 | _GEN_12 | _GEN_17 | ~_GEN_18)
         : _GEN_21
             ? _GEN_12 | _GEN_13 | _GEN_11 | ~_GEN_19 & ~(&(io_inst[14:12]))
             : _GEN_26 | ~_GEN_27 | _GEN_12 | _GEN_13 | _GEN_17 | ~_GEN_18);
  assign io_ctl_ctrlLSType =
    _GEN_8
      ? 2'h2
      : _GEN_6
          ? (_GEN_2 | ~_GEN_3 ? 2'h2 : _GEN_14 ? 2'h1 : {~(_GEN_9 | _GEN_12), 1'h0})
          : _GEN_21 | ~_GEN_26 ? 2'h2 : _GEN_13 ? 2'h1 : {~_GEN_12, 1'h0};
  assign io_imm =
    _GEN_7
      ? {io_inst[31:12], 12'h0}
      : _GEN_1
          ? {{12{io_inst[31]}}, io_inst[19:12], io_inst[20], io_inst[30:21], 1'h0}
          : _GEN_6
              ? (_GEN_5 | ~_GEN_15
                   ? {{20{io_inst[31]}}, io_inst[31:20]}
                   : {27'h0, io_inst[24:20]})
              : _GEN_21
                  ? {{20{io_inst[31]}}, io_inst[7], io_inst[30:25], io_inst[11:8], 1'h0}
                  : _GEN_26 ? {{20{io_inst[31]}}, io_inst[31:25], io_inst[11:7]} : 32'h0;
  assign io_regNum_rs1 = io_inst[19:15];
  assign io_regNum_rs2 = io_inst[24:20];
  assign io_regNum_rd = io_inst[11:7];
endmodule

module RegFile(
  input         clock,
                reset,
                io_regFileWe,
  input  [31:0] io_wD,
  input  [4:0]  io_regNum_rs1,
                io_regNum_rs2,
                io_regNum_rd,
  output [31:0] io_rR1,
                io_rR2
);

  reg  [31:0]       regs_0;
  reg  [31:0]       regs_1;
  reg  [31:0]       regs_2;
  reg  [31:0]       regs_3;
  reg  [31:0]       regs_4;
  reg  [31:0]       regs_5;
  reg  [31:0]       regs_6;
  reg  [31:0]       regs_7;
  reg  [31:0]       regs_8;
  reg  [31:0]       regs_9;
  reg  [31:0]       regs_10;
  reg  [31:0]       regs_11;
  reg  [31:0]       regs_12;
  reg  [31:0]       regs_13;
  reg  [31:0]       regs_14;
  reg  [31:0]       regs_15;
  reg  [31:0]       regs_16;
  reg  [31:0]       regs_17;
  reg  [31:0]       regs_18;
  reg  [31:0]       regs_19;
  reg  [31:0]       regs_20;
  reg  [31:0]       regs_21;
  reg  [31:0]       regs_22;
  reg  [31:0]       regs_23;
  reg  [31:0]       regs_24;
  reg  [31:0]       regs_25;
  reg  [31:0]       regs_26;
  reg  [31:0]       regs_27;
  reg  [31:0]       regs_28;
  reg  [31:0]       regs_29;
  reg  [31:0]       regs_30;
  reg  [31:0]       regs_31;
  wire [31:0][31:0] _GEN =
    {{regs_31},
     {regs_30},
     {regs_29},
     {regs_28},
     {regs_27},
     {regs_26},
     {regs_25},
     {regs_24},
     {regs_23},
     {regs_22},
     {regs_21},
     {regs_20},
     {regs_19},
     {regs_18},
     {regs_17},
     {regs_16},
     {regs_15},
     {regs_14},
     {regs_13},
     {regs_12},
     {regs_11},
     {regs_10},
     {regs_9},
     {regs_8},
     {regs_7},
     {regs_6},
     {regs_5},
     {regs_4},
     {regs_3},
     {regs_2},
     {regs_1},
     {regs_0}};
  always @(posedge clock) begin
    if (reset) begin
      regs_0 <= 32'h0;
      regs_1 <= 32'h0;
      regs_2 <= 32'h0;
      regs_3 <= 32'h0;
      regs_4 <= 32'h0;
      regs_5 <= 32'h0;
      regs_6 <= 32'h0;
      regs_7 <= 32'h0;
      regs_8 <= 32'h0;
      regs_9 <= 32'h0;
      regs_10 <= 32'h0;
      regs_11 <= 32'h0;
      regs_12 <= 32'h0;
      regs_13 <= 32'h0;
      regs_14 <= 32'h0;
      regs_15 <= 32'h0;
      regs_16 <= 32'h0;
      regs_17 <= 32'h0;
      regs_18 <= 32'h0;
      regs_19 <= 32'h0;
      regs_20 <= 32'h0;
      regs_21 <= 32'h0;
      regs_22 <= 32'h0;
      regs_23 <= 32'h0;
      regs_24 <= 32'h0;
      regs_25 <= 32'h0;
      regs_26 <= 32'h0;
      regs_27 <= 32'h0;
      regs_28 <= 32'h0;
      regs_29 <= 32'h0;
      regs_30 <= 32'h0;
      regs_31 <= 32'h0;
    end
    else begin
      automatic logic _GEN_0 = io_regFileWe & (|io_regNum_rd);
      if (_GEN_0 & ~(|io_regNum_rd))
        regs_0 <= io_wD;
      if (_GEN_0 & io_regNum_rd == 5'h1)
        regs_1 <= io_wD;
      if (_GEN_0 & io_regNum_rd == 5'h2)
        regs_2 <= io_wD;
      if (_GEN_0 & io_regNum_rd == 5'h3)
        regs_3 <= io_wD;
      if (_GEN_0 & io_regNum_rd == 5'h4)
        regs_4 <= io_wD;
      if (_GEN_0 & io_regNum_rd == 5'h5)
        regs_5 <= io_wD;
      if (_GEN_0 & io_regNum_rd == 5'h6)
        regs_6 <= io_wD;
      if (_GEN_0 & io_regNum_rd == 5'h7)
        regs_7 <= io_wD;
      if (_GEN_0 & io_regNum_rd == 5'h8)
        regs_8 <= io_wD;
      if (_GEN_0 & io_regNum_rd == 5'h9)
        regs_9 <= io_wD;
      if (_GEN_0 & io_regNum_rd == 5'hA)
        regs_10 <= io_wD;
      if (_GEN_0 & io_regNum_rd == 5'hB)
        regs_11 <= io_wD;
      if (_GEN_0 & io_regNum_rd == 5'hC)
        regs_12 <= io_wD;
      if (_GEN_0 & io_regNum_rd == 5'hD)
        regs_13 <= io_wD;
      if (_GEN_0 & io_regNum_rd == 5'hE)
        regs_14 <= io_wD;
      if (_GEN_0 & io_regNum_rd == 5'hF)
        regs_15 <= io_wD;
      if (_GEN_0 & io_regNum_rd == 5'h10)
        regs_16 <= io_wD;
      if (_GEN_0 & io_regNum_rd == 5'h11)
        regs_17 <= io_wD;
      if (_GEN_0 & io_regNum_rd == 5'h12)
        regs_18 <= io_wD;
      if (_GEN_0 & io_regNum_rd == 5'h13)
        regs_19 <= io_wD;
      if (_GEN_0 & io_regNum_rd == 5'h14)
        regs_20 <= io_wD;
      if (_GEN_0 & io_regNum_rd == 5'h15)
        regs_21 <= io_wD;
      if (_GEN_0 & io_regNum_rd == 5'h16)
        regs_22 <= io_wD;
      if (_GEN_0 & io_regNum_rd == 5'h17)
        regs_23 <= io_wD;
      if (_GEN_0 & io_regNum_rd == 5'h18)
        regs_24 <= io_wD;
      if (_GEN_0 & io_regNum_rd == 5'h19)
        regs_25 <= io_wD;
      if (_GEN_0 & io_regNum_rd == 5'h1A)
        regs_26 <= io_wD;
      if (_GEN_0 & io_regNum_rd == 5'h1B)
        regs_27 <= io_wD;
      if (_GEN_0 & io_regNum_rd == 5'h1C)
        regs_28 <= io_wD;
      if (_GEN_0 & io_regNum_rd == 5'h1D)
        regs_29 <= io_wD;
      if (_GEN_0 & io_regNum_rd == 5'h1E)
        regs_30 <= io_wD;
      if (_GEN_0 & (&io_regNum_rd))
        regs_31 <= io_wD;
    end
  end // always @(posedge)
  assign io_rR1 = io_regNum_rs1 == 5'h0 ? 32'h0 : _GEN[io_regNum_rs1];
  assign io_rR2 = io_regNum_rs2 == 5'h0 ? 32'h0 : _GEN[io_regNum_rs2];
endmodule

module Alu(
  input         io_aluctl_isJAL,
                io_aluctl_isSext,
  input  [3:0]  io_aluctl_op,
  input         io_aluctl_isSigned,
                io_aluctl_isBranch,
  input  [31:0] io_rR1,
                io_rR2,
                io_imm,
                io_pc,
  output        io_resultBr,
  output [31:0] io_resultC
);

  wire [31:0]       A = io_aluctl_isJAL ? io_pc : io_rR1;
  wire [31:0]       B = io_aluctl_isSext ? io_imm : io_rR2;
  wire [62:0]       _resultC_T_7 = {31'h0, A} << B[4:0];
  wire [15:0][31:0] _GEN =
    {{io_pc + io_imm},
     {io_aluctl_isBranch
        ? io_pc + io_imm
        : {31'h0, io_aluctl_isSigned ? $signed(A) < $signed(B) : A < B}},
     {io_pc + io_imm},
     {io_pc + io_imm},
     {$signed($signed(A) >>> B[4:0])},
     {32'h0},
     {A >> B[4:0]},
     {_resultC_T_7[31:0]},
     {A ^ B},
     {32'h0},
     {A | B},
     {A & B},
     {32'h0},
     {A - B},
     {A + B},
     {32'h0}};
  assign io_resultBr =
    ~(io_aluctl_op == 4'h0 | io_aluctl_op == 4'h1 | io_aluctl_op == 4'h2
      | io_aluctl_op == 4'h4 | io_aluctl_op == 4'h5 | io_aluctl_op == 4'h7
      | io_aluctl_op == 4'h8 | io_aluctl_op == 4'h9 | io_aluctl_op == 4'hB)
    & (io_aluctl_op == 4'hC
         ? A == B
         : io_aluctl_op == 4'hD
             ? A != B
             : io_aluctl_op == 4'hE
                 ? io_aluctl_isBranch
                   & (io_aluctl_isSigned ? $signed(A) < $signed(B) : A < B)
                 : (&io_aluctl_op)
                   & (io_aluctl_isSigned ? $signed(A) >= $signed(B) : A >= B));
  assign io_resultC = _GEN[io_aluctl_op];
endmodule

// external module DRAM

module DataMem(
  input         clock,
                io_ctl_isLoad,
                io_ctl_isStore,
                io_ctl_isSigned,
  input  [1:0]  io_ctl_ctrlLSType,
  input  [31:0] io_addr,
                io_dataStore,
  output [31:0] io_dataLoad
);

  wire [31:0] _dram_spo;
  wire        _GEN = io_ctl_ctrlLSType == 2'h2;
  wire        _GEN_0 = io_ctl_ctrlLSType == 2'h1;
  DRAM dram (
    .clk (clock),
    .a   ({2'h0, io_addr[31:2]}),
    .spo (_dram_spo),
    .we  (io_ctl_isStore),
    .d
      (io_ctl_isStore
         ? (_GEN
              ? io_dataStore
              : _GEN_0
                  ? {_dram_spo[31:16], io_dataStore[15:0]}
                  : {_dram_spo[31:8], io_dataStore[7:0]})
         : 32'h0)
  );
  assign io_dataLoad =
    io_ctl_isLoad
      ? (_GEN
           ? _dram_spo
           : _GEN_0
               ? (io_ctl_isSigned
                    ? {{16{_dram_spo[15]}}, _dram_spo[15:0]}
                    : {16'h0, _dram_spo[15:0]})
               : io_ctl_isSigned
                   ? {{24{_dram_spo[7]}}, _dram_spo[7:0]}
                   : {24'h0, _dram_spo[7:0]})
      : 32'h0;
endmodule

module Controller(
  input        io_CSIn_isLui,
               io_CSIn_isJump,
               io_CSIn_isBranch,
               io_CSIn_isRegWrite,
               io_CSIn_isLoad,
               io_CSIn_isStore,
               io_CSIn_isSext,
               io_CSIn_isJAL,
  input  [3:0] io_CSIn_op,
  input        io_CSIn_isSigned,
  input  [1:0] io_CSIn_ctrlLSType,
  output       io_AluCtl_isJAL,
               io_AluCtl_isSext,
  output [3:0] io_AluCtl_op,
  output       io_AluCtl_isSigned,
               io_AluCtl_isBranch,
               io_DMCtl_isLoad,
               io_DMCtl_isStore,
               io_DMCtl_isSigned,
  output [1:0] io_DMCtl_ctrlLSType,
  output       io_RfWselCtl_isJump,
               io_RfWselCtl_isLoad,
               io_RfWselCtl_isLui,
               io_CSOut_isJump,
               io_CSOut_isBranch,
               io_CSOut_isRegWrite
);

  assign io_AluCtl_isJAL = io_CSIn_isJAL;
  assign io_AluCtl_isSext = io_CSIn_isSext;
  assign io_AluCtl_op = io_CSIn_op;
  assign io_AluCtl_isSigned = io_CSIn_isSigned;
  assign io_AluCtl_isBranch = io_CSIn_isBranch;
  assign io_DMCtl_isLoad = io_CSIn_isLoad;
  assign io_DMCtl_isStore = io_CSIn_isStore;
  assign io_DMCtl_isSigned = io_CSIn_isSigned;
  assign io_DMCtl_ctrlLSType = io_CSIn_ctrlLSType;
  assign io_RfWselCtl_isJump = io_CSIn_isJump;
  assign io_RfWselCtl_isLoad = io_CSIn_isLoad;
  assign io_RfWselCtl_isLui = io_CSIn_isLui;
  assign io_CSOut_isJump = io_CSIn_isJump;
  assign io_CSOut_isBranch = io_CSIn_isBranch;
  assign io_CSOut_isRegWrite = io_CSIn_isRegWrite;
endmodule

module Rf_Wsel(
  input  [31:0] io_pc,
                io_dataFromRam,
  input         io_ctl_isJump,
                io_ctl_isLoad,
                io_ctl_isLui,
  input  [31:0] io_dataFromSext,
                io_AluC,
  output [31:0] io_wD
);

  assign io_wD =
    io_ctl_isJump
      ? io_pc + 32'h4
      : io_ctl_isLoad ? io_dataFromRam : io_ctl_isLui ? io_dataFromSext : io_AluC;
endmodule

module CPU(
  input         clock,
                reset,
  output        io_trace_debug_wb_have_inst,
  output [31:0] io_trace_debug_wb_pc,
  output        io_trace_debug_wb_ena,
  output [4:0]  io_trace_debug_wb_reg,
  output [31:0] io_trace_debug_wb_value
);

  wire [31:0] _rf_wsel_io_wD;
  wire        _ctl_io_AluCtl_isJAL;
  wire        _ctl_io_AluCtl_isSext;
  wire [3:0]  _ctl_io_AluCtl_op;
  wire        _ctl_io_AluCtl_isSigned;
  wire        _ctl_io_AluCtl_isBranch;
  wire        _ctl_io_DMCtl_isLoad;
  wire        _ctl_io_DMCtl_isStore;
  wire        _ctl_io_DMCtl_isSigned;
  wire [1:0]  _ctl_io_DMCtl_ctrlLSType;
  wire        _ctl_io_RfWselCtl_isJump;
  wire        _ctl_io_RfWselCtl_isLoad;
  wire        _ctl_io_RfWselCtl_isLui;
  wire        _ctl_io_CSOut_isJump;
  wire        _ctl_io_CSOut_isBranch;
  wire        _ctl_io_CSOut_isRegWrite;
  wire [31:0] _dm_io_dataLoad;
  wire        _alu_io_resultBr;
  wire [31:0] _alu_io_resultC;
  wire [31:0] _rf_io_rR1;
  wire [31:0] _rf_io_rR2;
  wire        _de_io_ctl_isLui;
  wire        _de_io_ctl_isJump;
  wire        _de_io_ctl_isBranch;
  wire        _de_io_ctl_isRegWrite;
  wire        _de_io_ctl_isLoad;
  wire        _de_io_ctl_isStore;
  wire        _de_io_ctl_isSext;
  wire        _de_io_ctl_isJAL;
  wire [3:0]  _de_io_ctl_op;
  wire        _de_io_ctl_isSigned;
  wire [1:0]  _de_io_ctl_ctrlLSType;
  wire [31:0] _de_io_imm;
  wire [4:0]  _de_io_regNum_rs1;
  wire [4:0]  _de_io_regNum_rs2;
  wire [4:0]  _de_io_regNum_rd;
  wire [31:0] _im_io_inst;
  wire [31:0] _pc_io_pc;
  reg         wb_have_inst;
  reg  [31:0] wb_pc;
  reg         wb_ena;
  reg  [4:0]  wb_reg;
  reg  [31:0] wb_value;
  always @(posedge clock) begin
    if (reset) begin
      wb_have_inst <= 1'h0;
      wb_pc <= 32'h0;
      wb_ena <= 1'h0;
      wb_reg <= 5'h0;
      wb_value <= 32'h0;
    end
    else begin
      wb_have_inst <= 1'h1;
      wb_pc <= _pc_io_pc;
      wb_ena <= _ctl_io_CSOut_isRegWrite;
      wb_reg <= _de_io_regNum_rd;
      wb_value <= _rf_wsel_io_wD;
    end
  end // always @(posedge)
  PCReg pc (
    .clock         (clock),
    .reset         (reset),
    .io_pc         (_pc_io_pc),
    .io_isJump     (_ctl_io_CSOut_isJump),
    .io_isBranch   (_ctl_io_CSOut_isBranch),
    .io_resultBr   (_alu_io_resultBr),
    .io_addrTarget (_alu_io_resultC)
  );
  InstMem im (
    .io_addr (_pc_io_pc),
    .io_inst (_im_io_inst)
  );
  Decoder de (
    .io_inst           (_im_io_inst),
    .io_ctl_isLui      (_de_io_ctl_isLui),
    .io_ctl_isJump     (_de_io_ctl_isJump),
    .io_ctl_isBranch   (_de_io_ctl_isBranch),
    .io_ctl_isRegWrite (_de_io_ctl_isRegWrite),
    .io_ctl_isLoad     (_de_io_ctl_isLoad),
    .io_ctl_isStore    (_de_io_ctl_isStore),
    .io_ctl_isSext     (_de_io_ctl_isSext),
    .io_ctl_isJAL      (_de_io_ctl_isJAL),
    .io_ctl_op         (_de_io_ctl_op),
    .io_ctl_isSigned   (_de_io_ctl_isSigned),
    .io_ctl_ctrlLSType (_de_io_ctl_ctrlLSType),
    .io_imm            (_de_io_imm),
    .io_regNum_rs1     (_de_io_regNum_rs1),
    .io_regNum_rs2     (_de_io_regNum_rs2),
    .io_regNum_rd      (_de_io_regNum_rd)
  );
  RegFile rf (
    .clock         (clock),
    .reset         (reset),
    .io_regFileWe  (_ctl_io_CSOut_isRegWrite),
    .io_wD         (_rf_wsel_io_wD),
    .io_regNum_rs1 (_de_io_regNum_rs1),
    .io_regNum_rs2 (_de_io_regNum_rs2),
    .io_regNum_rd  (_de_io_regNum_rd),
    .io_rR1        (_rf_io_rR1),
    .io_rR2        (_rf_io_rR2)
  );
  Alu alu (
    .io_aluctl_isJAL    (_ctl_io_AluCtl_isJAL),
    .io_aluctl_isSext   (_ctl_io_AluCtl_isSext),
    .io_aluctl_op       (_ctl_io_AluCtl_op),
    .io_aluctl_isSigned (_ctl_io_AluCtl_isSigned),
    .io_aluctl_isBranch (_ctl_io_AluCtl_isBranch),
    .io_rR1             (_rf_io_rR1),
    .io_rR2             (_rf_io_rR2),
    .io_imm             (_de_io_imm),
    .io_pc              (_pc_io_pc),
    .io_resultBr        (_alu_io_resultBr),
    .io_resultC         (_alu_io_resultC)
  );
  DataMem dm (
    .clock             (clock),
    .io_ctl_isLoad     (_ctl_io_DMCtl_isLoad),
    .io_ctl_isStore    (_ctl_io_DMCtl_isStore),
    .io_ctl_isSigned   (_ctl_io_DMCtl_isSigned),
    .io_ctl_ctrlLSType (_ctl_io_DMCtl_ctrlLSType),
    .io_addr           (_alu_io_resultC),
    .io_dataStore      (_rf_io_rR2),
    .io_dataLoad       (_dm_io_dataLoad)
  );
  Controller ctl (
    .io_CSIn_isLui       (_de_io_ctl_isLui),
    .io_CSIn_isJump      (_de_io_ctl_isJump),
    .io_CSIn_isBranch    (_de_io_ctl_isBranch),
    .io_CSIn_isRegWrite  (_de_io_ctl_isRegWrite),
    .io_CSIn_isLoad      (_de_io_ctl_isLoad),
    .io_CSIn_isStore     (_de_io_ctl_isStore),
    .io_CSIn_isSext      (_de_io_ctl_isSext),
    .io_CSIn_isJAL       (_de_io_ctl_isJAL),
    .io_CSIn_op          (_de_io_ctl_op),
    .io_CSIn_isSigned    (_de_io_ctl_isSigned),
    .io_CSIn_ctrlLSType  (_de_io_ctl_ctrlLSType),
    .io_AluCtl_isJAL     (_ctl_io_AluCtl_isJAL),
    .io_AluCtl_isSext    (_ctl_io_AluCtl_isSext),
    .io_AluCtl_op        (_ctl_io_AluCtl_op),
    .io_AluCtl_isSigned  (_ctl_io_AluCtl_isSigned),
    .io_AluCtl_isBranch  (_ctl_io_AluCtl_isBranch),
    .io_DMCtl_isLoad     (_ctl_io_DMCtl_isLoad),
    .io_DMCtl_isStore    (_ctl_io_DMCtl_isStore),
    .io_DMCtl_isSigned   (_ctl_io_DMCtl_isSigned),
    .io_DMCtl_ctrlLSType (_ctl_io_DMCtl_ctrlLSType),
    .io_RfWselCtl_isJump (_ctl_io_RfWselCtl_isJump),
    .io_RfWselCtl_isLoad (_ctl_io_RfWselCtl_isLoad),
    .io_RfWselCtl_isLui  (_ctl_io_RfWselCtl_isLui),
    .io_CSOut_isJump     (_ctl_io_CSOut_isJump),
    .io_CSOut_isBranch   (_ctl_io_CSOut_isBranch),
    .io_CSOut_isRegWrite (_ctl_io_CSOut_isRegWrite)
  );
  Rf_Wsel rf_wsel (
    .io_pc           (_pc_io_pc),
    .io_dataFromRam  (_dm_io_dataLoad),
    .io_ctl_isJump   (_ctl_io_RfWselCtl_isJump),
    .io_ctl_isLoad   (_ctl_io_RfWselCtl_isLoad),
    .io_ctl_isLui    (_ctl_io_RfWselCtl_isLui),
    .io_dataFromSext (_de_io_imm),
    .io_AluC         (_alu_io_resultC),
    .io_wD           (_rf_wsel_io_wD)
  );
  assign io_trace_debug_wb_have_inst = wb_have_inst;
  assign io_trace_debug_wb_pc = wb_pc;
  assign io_trace_debug_wb_ena = wb_ena;
  assign io_trace_debug_wb_reg = wb_reg;
  assign io_trace_debug_wb_value = wb_value;
endmodule

